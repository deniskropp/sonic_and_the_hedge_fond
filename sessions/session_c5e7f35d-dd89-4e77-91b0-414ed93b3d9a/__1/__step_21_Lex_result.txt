{"output":"This document details the `PromptDjMidi` component, a core UI element in the PromptDJ MIDI myfirstanalog project. It serves as the main interface for managing and visualizing musical prompts, handling MIDI input, and controlling playback.\n\n## Component: `PromptDjMidi`\n\n### Purpose\n\nThe `PromptDjMidi` component orchestrates the user interface for the real-time music generation application. It displays a grid of individual prompt controllers, manages global playback controls, and facilitates MIDI device selection and connection.\n\n### Grid Layout\n\n- The component renders a grid of `prompt-controller` elements. \n- The grid is configured to have 4 columns (`grid-template-columns: repeat(4, 1fr);`) and a defined gap (`gap: 2.5vmin;`).\n- The overall grid container (`#grid`) is responsive, with its size determined by `80vmin` for both width and height.\n- Each `prompt-controller` within the grid is styled to occupy its grid cell effectively (`width: 100%;`).\n\n### Prompt Management\n\n- The component maintains an internal `Map` called `prompts` to store the state of each prompt (e.g., text, weight, color, associated MIDI CC).\n- It listens for `prompt-changed` events emitted by individual `prompt-controller` components. When a prompt's properties are updated, this component updates its internal `prompts` map and dispatches a `prompts-changed` event to inform other parts of the application (like `LiveMusicHelper`).\n- The `makeBackground` method generates dynamic radial gradients for the component's background. These gradients visually represent the weights of active prompts, with brighter and larger gradients indicating higher weights. This method is throttled to optimize performance.\n\n### MIDI Input Handling\n\n- The component integrates with the `MidiDispatcher` utility to handle MIDI input.\n- It provides a UI section (toggleable via a 'MIDI' button) to:\n  - List available MIDI input devices.\n  - Allow the user to select an active MIDI input device.\n  - Display the selected device's name.\n- If no MIDI devices are found, a corresponding message is shown.\n- The `setShowMidi` method is responsible for requesting MIDI access and updating the list of available input IDs.\n\n### Playback Controls\n\n- A `play-pause-button` component is rendered, displaying the current `playbackState` ('stopped', 'playing', 'loading', 'paused').\n- Clicking the `play-pause-button` dispatches a `play-pause` event to the parent application, triggering the music playback or pause action.\n\n### Styling and Responsiveness\n\n- The component uses CSS custom properties and `vmin` units to ensure a degree of responsiveness.\n- The background is dynamically generated using radial gradients based on prompt weights, providing a visual feedback mechanism.\n- Specific styles are applied for the MIDI selection dropdown and the 'MIDI' button to indicate its active state.\n\n### Properties\n\n- `showMidi`: (Boolean) Controls the visibility of the MIDI device selection UI.\n- `playbackState`: (PlaybackState) Reflects the current playback status (e.g., 'playing', 'stopped').\n- `audioLevel`: (Number) Represents the current audio input level, used for visual feedback in `prompt-controller` components.\n- `midiInputIds`: (Array<string>) Stores the IDs of available MIDI input devices.\n- `activeMidiInputId`: (String | null) Stores the ID of the currently selected MIDI input device.\n- `filteredPrompts`: (Set<string>) A set of prompt texts that are currently filtered out by the AI.\n- `prompts`: (Map<string, Prompt>) Internal state holding all prompt data.\n- `midiDispatcher`: (MidiDispatcher) An instance of the `MidiDispatcher` for handling MIDI messages.\n\n### Events\n\n- `prompts-changed`: Dispatched when the properties of any prompt are updated. The event detail contains the updated `Map<string, Prompt>`.\n- `play-pause`: Dispatched when the play/pause button is clicked.\n- `error`: Dispatched when an error occurs (e.g., MIDI connection issues).","artifact":{"task":"T22","files":[{"path":"components/PromptDjMidi.ts.md","content":"## Component: `PromptDjMidi`\n\n### Purpose\n\nThe `PromptDjMidi` component orchestrates the user interface for the real-time music generation application. It displays a grid of individual prompt controllers, manages global playback controls, and facilitates MIDI device selection and connection.\n\n### Grid Layout\n\n- The component renders a grid of `prompt-controller` elements. \n- The grid is configured to have 4 columns (`grid-template-columns: repeat(4, 1fr);`) and a defined gap (`gap: 2.5vmin;`).\n- The overall grid container (`#grid`) is responsive, with its size determined by `80vmin` for both width and height.\n- Each `prompt-controller` within the grid is styled to occupy its grid cell effectively (`width: 100%;`).\n\n### Prompt Management\n\n- The component maintains an internal `Map` called `prompts` to store the state of each prompt (e.g., text, weight, color, associated MIDI CC).\n- It listens for `prompt-changed` events emitted by individual `prompt-controller` components. When a prompt's properties are updated, this component updates its internal `prompts` map and dispatches a `prompts-changed` event to inform other parts of the application (like `LiveMusicHelper`).\n- The `makeBackground` method generates dynamic radial gradients for the component's background. These gradients visually represent the weights of active prompts, with brighter and larger gradients indicating higher weights. This method is throttled to optimize performance.\n\n### MIDI Input Handling\n\n- The component integrates with the `MidiDispatcher` utility to handle MIDI input.\n- It provides a UI section (toggleable via a 'MIDI' button) to:\n  - List available MIDI input devices.\n  - Allow the user to select an active MIDI input device.\n  - Display the selected device's name.\n- If no MIDI devices are found, a corresponding message is shown.\n- The `setShowMidi` method is responsible for requesting MIDI access and updating the list of available input IDs.\n\n### Playback Controls\n\n- A `play-pause-button` component is rendered, displaying the current `playbackState` ('stopped', 'playing', 'loading', 'paused').\n- Clicking the `play-pause-button` dispatches a `play-pause` event to the parent application, triggering the music playback or pause action.\n\n### Styling and Responsiveness\n\n- The component uses CSS custom properties and `vmin` units to ensure a degree of responsiveness.\n- The background is dynamically generated using radial gradients based on prompt weights, providing a visual feedback mechanism.\n- Specific styles are applied for the MIDI selection dropdown and the 'MIDI' button to indicate its active state.\n\n### Properties\n\n- `showMidi`: (Boolean) Controls the visibility of the MIDI device selection UI.\n- `playbackState`: (PlaybackState) Reflects the current playback status (e.g., 'playing', 'stopped').\n- `audioLevel`: (Number) Represents the current audio input level, used for visual feedback in `prompt-controller` components.\n- `midiInputIds`: (Array<string>) Stores the IDs of available MIDI input devices.\n- `activeMidiInputId`: (String | null) Stores the ID of the currently selected MIDI input device.\n- `filteredPrompts`: (Set<string>) A set of prompt texts that are currently filtered out by the AI.\n- `prompts`: (Map<string, Prompt>) Internal state holding all prompt data.\n- `midiDispatcher`: (MidiDispatcher) An instance of the `MidiDispatcher` for handling MIDI messages.\n\n### Events\n\n- `prompts-changed`: Dispatched when the properties of any prompt are updated. The event detail contains the updated `Map<string, Prompt>`.\n- `play-pause`: Dispatched when the play/pause button is clicked.\n- `error`: Dispatched when an error occurs (e.g., MIDI connection issues)."}]},"team":null,"reasoning":null}