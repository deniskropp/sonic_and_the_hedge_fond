{"output":"## ToastMessage Component\n\nThe `ToastMessage` component is a custom LitElement web component responsible for displaying temporary, non-intrusive user notifications (toasts) within the application. It is designed to appear at the top-center of the viewport and can automatically dismiss itself or be dismissed by the user.\n\n### Purpose\n\nTo provide feedback to the user regarding important events, errors, or confirmations without interrupting their workflow. Examples include:\n\n*   Notifying the user of a MIDI connection error.\n*   Informing the user when a prompt has been filtered by the AI.\n*   Displaying any other brief, informative messages.\n\n### Features\n\n*   **Dynamic Messaging:** Accepts a `message` property to set the content of the toast. Supports rendering URLs as clickable links.\n*   **Visibility Control:** Uses a `showing` boolean property to control the visibility and animation of the toast.\n*   **Automatic Dismissal:** The toast animates out after a short period when `showing` is set to `false`.\n*   **Manual Dismissal:** Includes a close button ('✕') for immediate user dismissal.\n*   **Styling:** Provides a fixed position, distinct background, and smooth transition animations for a polished user experience.\n\n### Usage\n\nTo use the `ToastMessage` component, you would typically instantiate it and then call its `show()` method with the desired message. The `hide()` method can be called to dismiss it manually.\n\n**Example:**\n\n```typescript\n// Assuming 'toastMessage' is an instance of ToastMessage\n\ntrustMessage.show('MIDI device disconnected.');\n\n// To hide it manually (though it also hides automatically)\ntrustMessage.hide();\n```\n\n### Properties\n\n*   `message`: `string` - The text content to be displayed in the toast. URLs within the message will be rendered as clickable links.\n*   `showing`: `boolean` - Controls the visibility and animation state of the toast. When `true`, the toast is displayed; when `false`, it animates out.","artifact":{"task":"Document Components","files":[{"path":"components/ToastMessage.ts","content":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\nimport { css, html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\n@customElement('toast-message')\nexport class ToastMessage extends LitElement {\n  static override styles = css`\n    .toast {\n      line-height: 1.6;\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #000;\n      color: white;\n      padding: 15px;\n      border-radius: 5px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: 15px;\n      width: min(450px, 80vw);\n      transition: transform 0.5s cubic-bezier(0.19, 1, 0.22, 1);\n      border: 2px solid #fff;\n      box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\n      text-wrap: pretty;\n    }\n    button {\n      border-radius: 100px;\n      aspect-ratio: 1;\n      border: none;\n      color: #000;\n      cursor: pointer;\n    }\n    .toast:not(.showing) {\n      transition-duration: 1s;\n      transform: translate(-50%, -200%);\n    }\n    a {\n      color: #acacac;\n      text-decoration: underline;\n    }\n  `;\n\n  @property({ type: String }) message = '';\n  @property({ type: Boolean }) showing = false;\n\n  private renderMessageWithLinks() {\n    const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n    const parts = this.message.split( urlRegex );\n    return parts.map( ( part, i ) => {\n      if ( i % 2 === 0 ) return part;\n      return html`<a href=${part} target=\"_blank\" rel=\"noopener\">${part}</a>`;\n    } );\n  }\n\n  override render() {\n    return html`<div class=${classMap({ showing: this.showing, toast: true })}>\n      <div class=\"message\">${this.renderMessageWithLinks()}</div>\n      <button @click=${this.hide}>✕</button>\n    </div>`;\n  }\n\n  show(message: string) {\n    this.showing = true;\n    this.message = message;\n  }\n\n  hide() {\n    this.showing = false;\n  }\n\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'toast-message': ToastMessage\n  }\n}\n"}]},"team":null,"reasoning":null}