{"output":"## `components/PlayPauseButton.ts` Documentation\n\nThis component provides a visual toggle button for controlling playback state (play, pause, loading). It is implemented as a LitElement web component.\n\n### Functionality\n\nThe `PlayPauseButton` component renders an SVG icon that changes its appearance based on the `playbackState` property. It supports three states:\n\n*   **'stopped'**: Displays a play icon.\n*   **'playing'**: Displays a pause icon.\n*   **'loading'**: Displays a spinning loader icon.\n\nClicking the button (via its interactive hitbox) dispatches a `click` event, which can be handled by the parent component to control the application's playback.\n\n### Properties\n\n*   **`playbackState`**: (Type: `PlaybackState`) \n    *   Description: Represents the current playback status of the application.\n    *   Accepted values: `'stopped'`, `'playing'`, `'loading'`, `'paused'`.\n    *   Default: `'stopped'`.\n    *   Usage: This property drives the visual state of the button.\n\n### Rendering Logic\n\nThe component utilizes LitElement's templating to render an SVG graphic. The `renderIcon()` method is responsible for selecting and returning the appropriate SVG path based on the `playbackState` property:\n\n*   The main SVG structure provides a circular background with subtle shadow effects.\n*   The `renderPlay()`, `renderPause()`, and `renderLoading()` methods return specific SVG path data for each state.\n*   A transparent `div` with the class `hitbox` is overlaid on the SVG to capture pointer events, making the entire button area clickable.\n*   CSS styles are applied to control the button's appearance, hover effects, and the animation of the loader.\n\n### Usage Example (in parent component):\n\n```html\n<play-pause-button .playbackState=\"${this.currentPlaybackState}\"\n                 @click=\"${this.handlePlayPauseClick}\"></play-pause-button>\n```\n\n```typescript\n// In the parent component's class:\n\nimport './components/PlayPauseButton';\nimport type { PlaybackState } from './types';\n\n// ...\n\n@property({ type: String })\ncurrentPlaybackState: PlaybackState = 'stopped';\n\nhandlePlayPauseClick() {\n  // Logic to toggle playback\n  console.log('Play/Pause button clicked!');\n}\n// ...\n```","artifact":{"task":"T16","files":[{"path":"components/PlayPauseButton.ts.md","content":"## `components/PlayPauseButton.ts` Documentation\n\nThis component provides a visual toggle button for controlling playback state (play, pause, loading). It is implemented as a LitElement web component.\n\n### Functionality\n\nThe `PlayPauseButton` component renders an SVG icon that changes its appearance based on the `playbackState` property. It supports three states:\n\n*   **'stopped'**: Displays a play icon.\n*   **'playing'**: Displays a pause icon.\n*   **'loading'**: Displays a spinning loader icon.\n\nClicking the button (via its interactive hitbox) dispatches a `click` event, which can be handled by the parent component to control the application's playback.\n\n### Properties\n\n*   **`playbackState`**: (Type: `PlaybackState`) \n    *   Description: Represents the current playback status of the application.\n    *   Accepted values: `'stopped'`, `'playing'`, `'loading'`, `'paused'`.\n    *   Default: `'stopped'`.\n    *   Usage: This property drives the visual state of the button.\n\n### Rendering Logic\n\nThe component utilizes LitElement's templating to render an SVG graphic. The `renderIcon()` method is responsible for selecting and returning the appropriate SVG path based on the `playbackState` property:\n\n*   The main SVG structure provides a circular background with subtle shadow effects.\n*   The `renderPlay()`, `renderPause()`, and `renderLoading()` methods return specific SVG path data for each state.\n*   A transparent `div` with the class `hitbox` is overlaid on the SVG to capture pointer events, making the entire button area clickable.\n*   CSS styles are applied to control the button's appearance, hover effects, and the animation of the loader.\n\n### Usage Example (in parent component):\n\n```html\n<play-pause-button .playbackState=\"${this.currentPlaybackState}\"\n                 @click=\"${this.handlePlayPauseClick}\"></play-pause-button>\n```\n\n```typescript\n// In the parent component's class:\n\nimport './components/PlayPauseButton';\nimport type { PlaybackState } from './types';\n\n// ...\n\n@property({ type: String })\ncurrentPlaybackState: PlaybackState = 'stopped';\n\nhandlePlayPauseClick() {\n  // Logic to toggle playback\n  console.log('Play/Pause button clicked!');\n}\n// ...\n```"}]},"team":null,"reasoning":null}