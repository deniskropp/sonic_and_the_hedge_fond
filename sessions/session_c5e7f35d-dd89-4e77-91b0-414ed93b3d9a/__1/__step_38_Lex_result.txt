{"output":"## `utils/AudioAnalyser.ts`\n\nThis module provides the `AudioAnalyser` class, a utility designed to monitor and report the real-time audio levels within the application. It leverages the Web Audio API's `AnalyserNode` to capture frequency data and then computes an average level, which is dispatched as an event.\n\n### `AudioAnalyser` Class\n\nThis class extends `EventTarget` to allow other parts of the application to subscribe to audio level changes.\n\n#### Constructor\n\n-   **`constructor(context: AudioContext)`**:\n    -   Initializes the `AudioAnalyser` by creating an `AnalyserNode` from the provided `AudioContext`.\n    -   Configures the `AnalyserNode` with `smoothingTimeConstant = 0` for immediate feedback.\n    -   Initializes a `Uint8Array` (`freqData`) to store frequency bin magnitudes.\n    -   Binds the `loop` method to ensure correct `this` context.\n\n#### Methods\n\n-   **`getCurrentLevel(): number`**:\n    -   Retrieves the current audio frequency data from the `AnalyserNode` into the `freqData` array.\n    -   Calculates the average magnitude across all frequency bins.\n    -   Normalizes the average value to a range between 0 and 1 (by dividing by `0xff`, the maximum possible value for a frequency bin).\n    -   Returns the normalized average audio level.\n\n-   **`loop(): void`**:\n    -   This method is intended to be called repeatedly, typically via `requestAnimationFrame`.\n    -   It calls `getCurrentLevel()` to get the audio level.\n    -   Dispatches a custom event named `audio-level-changed` with the calculated level as `detail`.\n    -   Schedules itself to run again using `requestAnimationFrame`.\n\n-   **`start(): void`**:\n    -   Alias for the `loop` method. Call this to begin the audio level monitoring loop.\n\n-   **`stop(): void`**:\n    -   Cancels the animation frame request, effectively stopping the `loop` and subsequent event dispatches.\n\n#### Events\n\n-   **`audio-level-changed`**:\n    -   Dispatched whenever `loop()` is executed.\n    -   `detail`: A `number` representing the normalized current audio level (0 to 1).\n\n#### Integration with `LiveMusicHelper`\n\nThe `AudioAnalyser` can serve as an `extraDestination` for the `LiveMusicHelper`. By connecting the `outputNode` of `LiveMusicHelper` to the `node` of `AudioAnalyser`, the `AudioAnalyser` can process the audio output from the AI model, allowing the application to visualize the AI-generated music's volume levels.\n\n```typescript\n// Example Usage:\n\nimport { AudioAnalyser } from './utils/AudioAnalyser';\n\n// Assume 'liveMusicHelper' is an instance of LiveMusicHelper\n// and 'pdjMidi' is an instance of PromptDjMidi\n\nconst audioAnalyser = new AudioAnalyser(liveMusicHelper.audioContext);\n// Connect the output of LiveMusicHelper to the AnalyserNode\nliveMusicHelper.extraDestination = audioAnalyser.node;\n\n// Listen for audio level changes\naudioAnalyser.addEventListener('audio-level-changed', (e) => {\n  const level = (e as CustomEvent<number>).detail;\n  pdjMidi.audioLevel = level; // Update UI component\n});\n\n// To start monitoring:\n// audioAnalyser.start();\n\n// To stop monitoring:\n// audioAnalyser.stop();\n```\n","artifact":{"task":"T39","files":[{"path":"utils/AudioAnalyser.ts","content":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\n/** Simple class for getting the current audio level. */\nexport class AudioAnalyser extends EventTarget {\n  readonly node: AnalyserNode;\n  private readonly freqData: Uint8Array;\n  private rafId: number | null = null;\n  constructor(context: AudioContext) {\n    super();\n    this.node = context.createAnalyser();\n    this.node.smoothingTimeConstant = 0;\n    this.freqData = new Uint8Array(this.node.frequencyBinCount);\n    this.loop = this.loop.bind(this);\n  }\n  getCurrentLevel() {\n    this.node.getByteFrequencyData(this.freqData);\n    const avg = this.freqData.reduce((a, b) => a + b, 0) / this.freqData.length;\n    return avg / 0xff;\n  }\n  loop() {\n    this.rafId = requestAnimationFrame(this.loop);\n    const level = this.getCurrentLevel();\n    this.dispatchEvent(new CustomEvent('audio-level-changed', { detail: level }));\n  }\n  start = this.loop;\n  stop() {\n    if (this.rafId) cancelAnimationFrame(this.rafId);\n  }\n}\n"}]},"team":null,"reasoning":"The user requested documentation revision for `utils/AudioAnalyser.ts`. I have incorporated the feedback from the Documentation Reviewer (Critique) to enhance the clarity and technical detail of the documentation. This includes: providing a more explicit explanation of `getCurrentLevel()`, clarifying the role and usage of `loop()` and `start()`, highlighting the integration with `LiveMusicHelper` as `extraDestination`, adding details about the constructor's actions, and including a more comprehensive example demonstrating event handling and integration. I have also ensured the documentation accurately reflects the provided source code."}