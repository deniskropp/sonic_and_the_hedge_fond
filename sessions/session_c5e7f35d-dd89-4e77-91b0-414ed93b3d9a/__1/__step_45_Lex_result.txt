{"output":"## `utils/audio.ts`\n\nThis file contains utility functions for handling audio data, specifically for encoding, decoding, and creating `Blob` objects compatible with the `@google/genai` library. It facilitates the conversion of audio data between different formats required for AI model interaction and web compatibility.\n\n### Functions:\n\n*   **`encode(bytes: Uint8Array): string`**\n    *   **Purpose:** Converts a `Uint8Array` into a base64 encoded string.\n    *   **Usage:** This is used internally to prepare binary audio data for transmission or storage where a string format is required.\n    *   **Mechanism:** Iterates through the byte array, converting each byte to its corresponding character and then encoding the resulting binary string using `btoa()`.\n\n*   **`decode(base64: string): Uint8Array`**\n    *   **Purpose:** Decodes a base64 encoded string back into a `Uint8Array`.\n    *   **Usage:** Used to reconstruct binary audio data from a base64 string received from an external source or storage.\n    *   **Mechanism:** Uses `atob()` to decode the base64 string into a binary string, then converts each character back into its corresponding byte value to populate a `Uint8Array`.\n\n*   **`createBlob(data: Float32Array): Blob`**\n    *   **Purpose:** Creates a `Blob` object from `Float32Array` audio data, suitable for sending to the AI model.\n    *   **Usage:** Prepares audio chunks for the AI model, converting floating-point audio samples to a format that can be encoded and transmitted.\n    *   **Parameters:**\n        *   `data`: A `Float32Array` containing audio samples, typically in the range of -1.0 to 1.0.\n    *   **Mechanism:** \n        1.  Converts the `Float32Array` (range -1 to 1) to an `Int16Array` (range -32768 to 32767).\n        2.  Creates a `Uint8Array` from the `Int16Array`'s buffer.\n        3.  Encodes this `Uint8Array` using the `encode` function.\n        4.  Returns an object conforming to the `Blob` interface, including the encoded data and a `mimeType` of `audio/pcm;rate=16000`.\n\n*   **`decodeAudioData(data: Uint8Array, ctx: AudioContext, sampleRate: number, numChannels: number): Promise<AudioBuffer>`**\n    *   **Purpose:** Decodes raw audio data (`Uint8Array`) into an `AudioBuffer` that can be played by the Web Audio API.\n    *   **Usage:** Used to process audio data received from the AI model or other sources for playback.\n    *   **Parameters:**\n        *   `data`: The raw audio data as a `Uint8Array` (expected to be PCM 16-bit signed integers).\n        *   `ctx`: The `AudioContext` instance.\n        *   `sampleRate`: The sample rate of the audio data.\n        *   `numChannels`: The number of audio channels.\n    *   **Mechanism:** \n        1.  Creates an `AudioBuffer` with the specified number of channels and sample rate.\n        2.  Interprets the `Uint8Array` as an `Int16Array`.\n        3.  Converts the `Int16Array` data to `Float32Array` (range -1 to 1).\n        4.  Interleaves the channel data if `numChannels` is greater than 0.\n        5.  Copies the processed `Float32Array` data into the channels of the `AudioBuffer`.\n        6.  Returns the populated `AudioBuffer`.\n\n### Exported Members:\n\n*   `createBlob`\n*   `decode`\n*   `decodeAudioData`\n*   `encode`","artifact":{"task":"T46","files":[{"path":"docs/utils/audio.md","content":"## `utils/audio.ts`\n\nThis file contains utility functions for handling audio data, specifically for encoding, decoding, and creating `Blob` objects compatible with the `@google/genai` library. It facilitates the conversion of audio data between different formats required for AI model interaction and web compatibility.\n\n### Functions:\n\n*   **`encode(bytes: Uint8Array): string`**\n    *   **Purpose:** Converts a `Uint8Array` into a base64 encoded string.\n    *   **Usage:** This is used internally to prepare binary audio data for transmission or storage where a string format is required.\n    *   **Mechanism:** Iterates through the byte array, converting each byte to its corresponding character and then encoding the resulting binary string using `btoa()`.\n\n*   **`decode(base64: string): Uint8Array`**\n    *   **Purpose:** Decodes a base64 encoded string back into a `Uint8Array`.\n    *   **Usage:** Used to reconstruct binary audio data from a base64 string received from an external source or storage.\n    *   **Mechanism:** Uses `atob()` to decode the base64 string into a binary string, then converts each character back into its corresponding byte value to populate a `Uint8Array`.\n\n*   **`createBlob(data: Float32Array): Blob`**\n    *   **Purpose:** Creates a `Blob` object from `Float32Array` audio data, suitable for sending to the AI model.\n    *   **Usage:** Prepares audio chunks for the AI model, converting floating-point audio samples to a format that can be encoded and transmitted.\n    *   **Parameters:**\n        *   `data`: A `Float32Array` containing audio samples, typically in the range of -1.0 to 1.0.\n    *   **Mechanism:** \n        1.  Converts the `Float32Array` (range -1 to 1) to an `Int16Array` (range -32768 to 32767).\n        2.  Creates a `Uint8Array` from the `Int16Array`'s buffer.\n        3.  Encodes this `Uint8Array` using the `encode` function.\n        4.  Returns an object conforming to the `Blob` interface, including the encoded data and a `mimeType` of `audio/pcm;rate=16000`.\n\n*   **`decodeAudioData(data: Uint8Array, ctx: AudioContext, sampleRate: number, numChannels: number): Promise<AudioBuffer>`**\n    *   **Purpose:** Decodes raw audio data (`Uint8Array`) into an `AudioBuffer` that can be played by the Web Audio API.\n    *   **Usage:** Used to process audio data received from the AI model or other sources for playback.\n    *   **Parameters:**\n        *   `data`: The raw audio data as a `Uint8Array` (expected to be PCM 16-bit signed integers).\n        *   `ctx`: The `AudioContext` instance.\n        *   `sampleRate`: The sample rate of the audio data.\n        *   `numChannels`: The number of audio channels.\n    *   **Mechanism:** \n        1.  Creates an `AudioBuffer` with the specified number of channels and sample rate.\n        2.  Interprets the `Uint8Array` as an `Int16Array`.\n        3.  Converts the `Int16Array` data to `Float32Array` (range -1 to 1).\n        4.  Interleaves the channel data if `numChannels` is greater than 0.\n        5.  Copies the processed `Float32Array` data into the channels of the `AudioBuffer`.\n        6.  Returns the populated `AudioBuffer`.\n\n### Exported Members:\n\n*   `createBlob`\n*   `decode`\n*   `decodeAudioData`\n*   `encode`"}]},"team":null,"reasoning":"The user asked to document the `utils/audio.ts` file. I have analyzed the provided code for this file and generated documentation that explains its purpose, the functions it exports (`encode`, `decode`, `createBlob`, `decodeAudioData`), their individual purposes, usage, and internal mechanisms. The documentation is formatted using Markdown and includes a section for exported members, adhering to the TAS for documenting utility functions."}