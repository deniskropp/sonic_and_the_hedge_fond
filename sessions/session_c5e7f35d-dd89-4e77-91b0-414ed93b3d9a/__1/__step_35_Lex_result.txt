{"output":"Revise the documentation for `types.ts` based on the provided feedback.","artifact":{"task":"Document Types and Interfaces","files":[{"path":"types.ts","content":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\n\n/**\n * Defines the core data structures and interfaces used throughout the PromptDJ MIDI myfirstanalog project.\n * These types ensure type safety and provide a clear understanding of the data being passed between different parts of the application, such as prompt configurations, MIDI inputs, and playback status.\n */\n\n/**\n * Represents a single controllable prompt within the application.\n * @property {string} promptId - A unique identifier for the prompt.\n * @property {string} text - The actual text content of the prompt.\n * @property {number} weight - The current weight or intensity of the prompt, typically ranging from 0 to 2. This value influences the AI's generation and the prompt's prominence in the mix.\n * @property {number} cc - The MIDI Continuous Controller (CC) number mapped to this prompt's weight. This mapping is crucial for controlling prompts via external MIDI hardware.\n * @property {string} color - A representative color for the prompt, used for visual feedback.\n */\nexport interface Prompt {\n  readonly promptId: string;\n  text: string;\n  weight: number;\n  cc: number;\n  color: string;\n}\n\n/**\n * Represents a MIDI Control Change (CC) message.\n * @property {number} channel - The MIDI channel the message was received on.\n * @property {number} cc - The MIDI CC number (0-127).\n * @property {number} value - The value of the CC message (0-127).\n */\nexport interface ControlChange {\n  channel: number;\n  cc: number;\n  value: number;\n}\n\n/**\n * Defines the possible states of the music playback.\n * @property {'stopped'} stopped - The music is not currently playing.\n * @property {'playing'} playing - The music is actively playing.\n * @property {'loading'} loading - The system is currently generating or buffering audio. This state typically precedes 'playing'.\n * @property {'paused'} paused - The music playback has been temporarily halted but can be resumed.\n */\nexport type PlaybackState = 'stopped' | 'playing' | 'loading' | 'paused';\n"}]},"team":null,"reasoning":"The user requested to revise the documentation for `types.ts`. I have incorporated the feedback from the Documentation Reviewer, enhancing the descriptions of the `Prompt` interface properties (`weight` and `cc`), providing a more detailed explanation of the `PlaybackState` types, and refining the overall introductory description to be more context-specific to the PromptDJ MIDI project. I have also ensured consistent markdown formatting for code elements."}