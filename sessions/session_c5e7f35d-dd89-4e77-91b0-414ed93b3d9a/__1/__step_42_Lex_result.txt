{"output":"The `MidiDispatcher` class is responsible for managing interactions with the Web MIDI API. It handles the connection to MIDI devices, listens for MIDI Control Change (CC) messages, and dispatches these messages as custom events for other parts of the application to consume. This allows for MIDI controllers to dynamically control various parameters within the PromptDJ application, such as prompt weights.","artifact":{"task":"T43","files":[{"path":"utils/MidiDispatcher.ts.md","content":"## `MidiDispatcher` Class\n\nThe `MidiDispatcher` class is a utility designed to abstract the complexities of the Web MIDI API, providing a cleaner interface for interacting with MIDI devices.\n\n### Purpose\n\nIts primary purpose is to:\n\n1.  **Request and manage MIDI access:** Handles the process of requesting permission to access MIDI devices from the browser.\n2.  **Listen for MIDI messages:** Attaches event listeners to MIDI input devices to capture incoming messages.\n3.  **Filter and dispatch CC messages:** Specifically identifies and processes MIDI Control Change (CC) messages, re-dispatching them as custom `cc-message` events. This allows other components to react to MIDI controller inputs without needing to directly manage the low-level MIDI API.\n\n### Key Features and Functionality\n\n*   **`getMidiAccess()`:**\n    *   Asynchronously requests access to MIDI devices using `navigator.requestMIDIAccess()`.\n    *   Throws an error if the browser does not support the Web MIDI API or if access is denied.\n    *   Sets up event listeners for each connected MIDI input device.\n    *   Identifies and stores the IDs of available MIDI input devices.\n    *   Automatically selects the first available MIDI input device as the active one if none is already set.\n    *   Returns a promise that resolves with an array of MIDI input device IDs.\n\n*   **`activeMidiInputId` Property:**\n    *   A public property that stores the ID of the currently active MIDI input device. This allows the application to specify which MIDI controller should be listened to.\n\n*   **`onmidimessage` Event Handler:**\n    *   Attached to each MIDI input device.\n    *   Filters messages to only process those from the `activeMidiInputId`.\n    *   Further filters messages to only respond to MIDI Control Change (CC) messages (status byte `0xb0`).\n    *   Extracts the CC number, value, and channel from the MIDI message.\n    *   Dispatches a custom event named `cc-message` with the extracted MIDI CC data as `event.detail`.\n\n*   **`getDeviceName(id: string)`:**\n    *   Retrieves the user-friendly name of a MIDI device given its ID.\n\n### Usage Example\n\nTo use `MidiDispatcher` in a component:\n\n1.  **Instantiate:**\n    ```typescript\n    import { MidiDispatcher } from '../utils/MidiDispatcher';\n    const midiDispatcher = new MidiDispatcher();\n    ```\n\n2.  **Request MIDI Access and Listen for CC Messages:**\n    ```typescript\n    // In a LitElement component's connectedCallback or similar lifecycle method:\n    async connectedCallback() {\n      super.connectedCallback();\n      try {\n        const inputIds = await this.midiDispatcher.getMidiAccess();\n        console.log('Available MIDI inputs:', inputIds);\n        // Optionally set the active MIDI input ID here if needed\n        // this.midiDispatcher.activeMidiInputId = inputIds[0];\n      } catch (e) {\n        console.error('Failed to get MIDI access:', e);\n      }\n\n      this.midiDispatcher.addEventListener('cc-message', (e: Event) => {\n        const customEvent = e as CustomEvent<ControlChange>;\n        const { channel, cc, value } = customEvent.detail;\n        console.log(`Received CC message: Channel=${channel}, CC=${cc}, Value=${value}`);\n        // Handle the MIDI CC message here\n      });\n    }\n    ```\n\n### Error Handling\n\nThe class includes basic error handling for:\n\n*   Browsers that do not support the Web MIDI API.\n*   Failure to acquire MIDI access.\n*   MIDI messages missing data.\n\nIt dispatches these errors as `CustomEvent`s, allowing the application to display user-friendly messages.\n"}]},"team":null,"reasoning":null}