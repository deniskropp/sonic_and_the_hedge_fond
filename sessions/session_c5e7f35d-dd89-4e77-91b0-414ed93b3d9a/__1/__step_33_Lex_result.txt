{"output":"The `types.ts` file defines the core data structures and interfaces used throughout the PromptDJ MIDI myfirstanalog project. This ensures type safety and provides a clear understanding of the data being passed between different parts of the application.\n\n**Interfaces:**\n\n*   **`Prompt`**: Represents a single controllable prompt within the application.\n    *   `promptId` (string, readonly): A unique identifier for the prompt.\n    *   `text` (string): The text content of the prompt.\n    *   `weight` (number): The current weight or intensity of the prompt, typically ranging from 0 to 2.\n    *   `cc` (number): The MIDI Continuous Controller (CC) number mapped to this prompt's weight.\n    *   `color` (string): The associated color for the prompt, likely used for UI representation.\n\n*   **`ControlChange`**: Represents a MIDI Control Change (CC) message.\n    *   `channel` (number): The MIDI channel on which the message was received.\n    *   `cc` (number): The CC number being changed.\n    *   `value` (number): The new value of the CC message (typically 0-127).\n\n**Type Aliases:**\n\n*   **`PlaybackState`**: Defines the possible states of the music playback.\n    *   `'stopped'`\n    *   `'playing'`\n    *   `'loading'`\n    *   `'paused'`\n\nBy defining these types, the project maintains consistency and facilitates easier development and debugging.","artifact":{"task":"Document Types and Interfaces","files":[{"path":"types.ts","content":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\n\n/**\n * Defines the core data structures and interfaces used throughout the PromptDJ MIDI myfirstanalog project.\n * This ensures type safety and provides a clear understanding of the data being passed between different parts of the application.\n */\n\n/**\n * Represents a single controllable prompt within the application.\n */\nexport interface Prompt {\n  readonly promptId: string;\n  text: string;\n  weight: number;\n  cc: number;\n  color: string;\n}\n\n/**\n * Represents a MIDI Control Change (CC) message.\n */\nexport interface ControlChange {\n  channel: number;\n  cc: number;\n  value: number;\n}\n\n/**\n * Defines the possible states of the music playback.\n */\nexport type PlaybackState = 'stopped' | 'playing' | 'loading' | 'paused';\n"}]},"team":null,"reasoning":"The user requested documentation for the `types.ts` file, which falls under the 'Document Types and Interfaces' TAS. I have analyzed the content of `types.ts` and generated documentation explaining the `Prompt` interface, the `ControlChange` interface, and the `PlaybackState` type alias. The documentation includes descriptions of each property and their types, as well as the overall purpose of the file. The generated documentation is accurate and follows the requested technical writing style. The output is formatted as a JSON object with the documentation content in the 'output' field and the original file content in the 'artifact' field, as per the instructions."}